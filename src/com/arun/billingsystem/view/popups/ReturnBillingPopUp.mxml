<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   width="100%" height="100%" title="Return Bill"
			   styleName="panelStyle"
			   backgroundColor="#f7f8f5"
			   close="remove()" xmlns:autocomplete="com.arun.billingsystem.util.autocomplete.*">
	<s:states>
		<s:State name="showBill" />
		<s:State name="showAddPurchase" />
	</s:states>
	<fx:Script>
		<![CDATA[
			import com.arun.billingsystem.common.Constant;
			import com.arun.billingsystem.common.ErrorConstant;
			import com.arun.billingsystem.domain.Purchase;
			import com.arun.billingsystem.domain.PurchaseDetail;
			import com.arun.billingsystem.domain.Stock;
			import com.arun.billingsystem.event.RootEvent;
			import com.arun.billingsystem.util.FormatUtil;
			import com.arun.billingsystem.util.StringUtil;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.primitives.Rect;
			
			private static var returnBilling:ReturnBillingPopUp;
			
			[Bindable]public var showReturnBill:Boolean = false;
			[Bindable]public var showTotalReturn:int = 0;
			private static var _purchase:Purchase;
			[Dispatcher]public var dispatch:IEventDispatcher;
			
			[Bindable]
			public static function get purchase():Purchase
			{
				return _purchase;
			}

			public static function set purchase(value:Purchase):void
			{
				_purchase = value;
				returnBilling.showReturnBill = true;
				returnBilling.setBillingData();
			}

			public static function show():ReturnBillingPopUp {
				returnBilling = new ReturnBillingPopUp();
				returnBilling.showPopUp();
				return returnBilling;
			}
			
			public function showPopUp():void {
				PopUpManager.addPopUp(this, FlexGlobals.topLevelApplication.document, true);
				PopUpManager.centerPopUp(this);
			}
			
			public function remove():void {
				PopUpManager.removePopUp(returnBilling);
			}
			
			public function setBillingData():void
			{
				if(purchase != null){
					billNoTxt.text = purchase.billNo;
					dateTxt.text = FormatUtil.stringDateFormat(purchase.date);
					billType.text = purchase.billType;
					status.text = purchase.status;
					returnGrid.dataProvider = purchase.purchaseList;
					totalQuantityTxt.text = String(purchase.totalQty);
					returnTotalQuantityTxt.text = String(purchase.returnQty); 
					subTotalTxtInput.text = FormatUtil.numberFormat(purchase.subTotal);
					discountTxtInput.text = String(purchase.discount);
					grandTotalTxtInput.text = FormatUtil.numberFormat(purchase.grandTotal);
					grandTotalTxt.text = FormatUtil.numberFormat(purchase.grandTotal);
					this.currentState = "showAddPurchase";
				}
			}
						
			public function returnBill_buttonClickHandler():void {
				if(purchase != null){
					purchase.totalQty = Number(totalQuantityTxt.text);
					purchase.returnQty = Number(returnTotalQuantityTxt.text);
					purchase.subTotal = Number(StringUtil.replace(returnSubTotalTxtInput.text,",",""));
					purchase.amountRecived = Number(StringUtil.replace(returnSubTotalTxtInput.text,",",""));
					purchase.discount = Number(StringUtil.replace(returnDiscountTxtInput.text, ",",""));
					purchase.grandTotal = Number(StringUtil.replace(returnGrandTotalTxtInput.text, ",",""));
					ShowAlert.show(ErrorConstant.ERROR_132, Constant.BILL_RETURN, Constant.SHOW_IMG_SUC, purchase);
				}
			}
			
			protected function billerNameTxtInput_keyDownHandler(event:KeyboardEvent):void
			{
				//open Bill on press of enter key
				if(event.keyCode == Keyboard.ENTER){
					var billNo:String = billerNameTxtInput.text;
					if(billNo != null && billNo != ""){
						var purchaseOpen:Purchase = new Purchase();
						purchaseOpen.billNo = billNo;
						var rootEvent:RootEvent = new RootEvent(RootEvent.EVENT_CONFIRMATION);
						rootEvent.popUpType = Constant.BILL_OPEN;
						rootEvent.purchase = purchaseOpen;
						dispatch.dispatchEvent(rootEvent);
					}
				}
			}
			
			protected function itemCode_focusOutHanlder():void {
				var stock:Stock = Stock(returnItemCodeTxtInput.selectedItem);
				var defaultQty:int = 1;
				if(stock != null){
					returnRateTxtInput.text = stock.soldPrice.toString();
					returnQuantityTxtInput.text = defaultQty.toString();
				}
			}
			
			protected function keyDownHanlder(event:KeyboardEvent):void {
				if(event.keyCode == Keyboard.ENTER){
					updateStockDetail();
					bindReturnDataGrid();
					updateReturnTotal();
				}
			}
			
			public function returnBilling_buttonClickHandler():void {
				if(returnGrid.selectedIndex >= 0){
					var purchaseDetail:PurchaseDetail = returnGrid.selectedItem as PurchaseDetail;
						//If return item colum is more than 1, then seperate the return item.
						if(purchaseDetail.quantity > 1) {
							//return copy object
							addPurchaseDetail(purchaseDetail, Constant.BILL_STATUS_RETURN);
							
							//update old object
							purchaseDetail.quantity = (purchaseDetail.quantity - 1);
							purchaseDetail.totalAmount = (purchaseDetail.quantity * purchaseDetail.soldPrice);
							purchaseDetail.returnType = Constant.RETURN_TYPE_UPDATE;
							purchaseDetail.status = Constant.BILL_STATUS_CLOSED;
						} else {
							purchaseDetail.returnType = Constant.RETURN_TYPE_UPDATE;
							purchaseDetail.status = Constant.BILL_STATUS_RETURN;
						}
						showTotalReturn = showTotalReturn + 1;
						bindReturnDataGrid();
						updateReturnTotal();
				}
			}
			
			public function addPurchaseDetail(purchaseDetail:PurchaseDetail, status:String):void {
				var isAdd:Boolean = false;
				var purchaseDetailArr:ArrayCollection = purchase.purchaseList as ArrayCollection;
				if(purchaseDetailArr != null && purchaseDetailArr.length > 0){
					for(var i:int=0; i<purchaseDetailArr.length; i++){
						var purDetail:PurchaseDetail = purchaseDetailArr.getItemAt(i) as PurchaseDetail;
						if(purDetail.itemCode == purchaseDetail.itemCode && purDetail.soldPrice == purchaseDetail.soldPrice && purDetail.status == status) {
							purDetail.quantity = purDetail.quantity + 1;
							purDetail.totalAmount = purDetail.quantity * purDetail.soldPrice;
							purDetail.returnType = Constant.RETURN_TYPE_UPDATE;
							isAdd = false;
							break;
						} else {
							isAdd = true;
						}
					}
					if(isAdd){
						var newPurchaseDetail:PurchaseDetail = createReturnPurchaseDetail(purchaseDetail);
						newPurchaseDetail.returnType = Constant.RETURN_TYPE_ADD;
						newPurchaseDetail.status = status;
						purchase.purchaseList.addItemAt(newPurchaseDetail, (returnGrid.selectedIndex + 1));
					}
				}
			}
						
			private function updateStockDetail():void {
				var stock:Stock = Stock(returnItemCodeTxtInput.selectedItem);
				var purchaseDetail:PurchaseDetail = null;
				if(stock != null){
					var quantity:int = Number(returnQuantityTxtInput.text);
					var rate:int = Number(returnRateTxtInput.text);
					if(quantity > 0 && rate > 0){
						purchaseDetail = new PurchaseDetail();
						purchaseDetail.category = stock.category;
						purchaseDetail.itemCode = stock.itemCode;
						purchaseDetail.itemName = stock.itemName;
						if(stock.discount != 0){
							rate = stock.soldPrice - (stock.soldPrice * (stock.discount / 100 ));
						} 
						purchaseDetail.quantity = quantity;
						purchaseDetail.soldPrice = rate;
						purchaseDetail.totalAmount  = (quantity * rate);
						purchaseDetail.status = Constant.BILL_STATUS_CLOSED;
						purchaseDetail.sno = purchase.purchaseList.length + 1;
						addPurchaseDetail(purchaseDetail, Constant.BILL_STATUS_CLOSED);
					}
				}
			}
			
			private function bindReturnDataGrid():void {
				var tempDataArr:ArrayCollection = purchase.purchaseList as ArrayCollection;
				returnGrid.dataProvider = tempDataArr;
				tempDataArr.refresh();
			}
			
			public function createReturnPurchaseDetail(purchaseDetail:PurchaseDetail):PurchaseDetail {
				var copyPurchaseDetail:PurchaseDetail = new PurchaseDetail();
				copyPurchaseDetail.sno = purchaseDetail.sno;
				copyPurchaseDetail.category = purchaseDetail.category;
				copyPurchaseDetail.itemCode = purchaseDetail.itemCode;
				copyPurchaseDetail.itemName = purchaseDetail.itemName;
				copyPurchaseDetail.purchasePrice = purchaseDetail.purchasePrice;
				copyPurchaseDetail.soldPrice = purchaseDetail.soldPrice;
				copyPurchaseDetail.sno = purchaseDetail.sno;
				copyPurchaseDetail.quantity = 1;
				copyPurchaseDetail.totalAmount = (copyPurchaseDetail.quantity * copyPurchaseDetail.soldPrice );
				copyPurchaseDetail.sno = purchase.purchaseList.length + 1;
				return copyPurchaseDetail;
			}
			
			public function updateReturnTotal():void {
				var totalAmount:int = 0;
				var returnAmount:int = 0;
				var returnPics:int = 0;
				if(purchase != null){
					var purchaseArr:ArrayCollection = purchase.purchaseList as ArrayCollection;
					for(var i:int=0; i<purchaseArr.length; i++){
						var purchaseDetail:PurchaseDetail = purchaseArr.getItemAt(i) as PurchaseDetail;
						if(purchaseDetail.status == Constant.BILL_STATUS_CLOSED){
							totalAmount = totalAmount + purchaseDetail.totalAmount;
						} else if(purchaseDetail.status == Constant.BILL_STATUS_RETURN && purchaseDetail.returnType != Constant.BILL_STATUS_CLOSED) {
							returnAmount = returnAmount + purchaseDetail.totalAmount;
						}
						//Total Return Pics
						if(purchaseDetail.status == Constant.BILL_STATUS_RETURN){
							returnPics = returnPics + purchaseDetail.quantity;
						}
					}
				}
				returnSubTotalTxtInput.text = FormatUtil.numberFormat(totalAmount);
				returnGrandTotalTxtInput.text = FormatUtil.numberFormat(totalAmount);
				grandTotalTxt.text = FormatUtil.numberFormat(totalAmount);
				returnTotalQuantityTxt.text = String(returnPics);
				totalQuantityTxt.text = String((Number(totalQuantityTxt.text) - returnPics));
				returnAmountTxt.text = FormatUtil.numberFormat(returnAmount);
			}
			
			protected function discountTxtInput_keyUpHandler():void
			{
				var subTotal:Number = Number(StringUtil.replace(returnSubTotalTxtInput.text, ",", ""));
				var discount:Number = Number(StringUtil.replace(returnDiscountTxtInput.text, ",", ""));
				var totalAmount:Number = ( subTotal - discount );
				returnGrandTotalTxtInput.text = FormatUtil.numberFormat(totalAmount);
				grandTotalTxt.text = FormatUtil.numberFormat(totalAmount);
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%" paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10">
		<s:VGroup width="100%" horizontalAlign="left" includeIn="showBill" creationComplete="{billerNameTxtInput.setFocus()}">
			<mx:Label text="Bill No :" styleName="FormlabelStyle"/>
			<s:TextInput id="billerNameTxtInput" width="100%" styleName="TextInputStyle" keyDown="billerNameTxtInput_keyDownHandler(event)"/>
		</s:VGroup>
		<s:HGroup width="100%" horizontalAlign="left" includeIn="showAddPurchase">
			<s:HGroup width="100%" height="100%">
				<mx:Label text="Item Code :" styleName="FormlabelStyle"/>
				<autocomplete:AutoComplete id="returnItemCodeTxtInput" labelField="itemCode" forceOpen="false" styleName="TextInputStyle"
										   skinClass="skins.AutoCompleteSkin" width="100%" dataProvider="{purchase.stockDetailList}"
										   focusOut="itemCode_focusOutHanlder()"/>
			</s:HGroup>
			<s:HGroup height="100%">
				<mx:Label text="Pics :" styleName="FormlabelStyle"/>
				<s:TextInput id="returnQuantityTxtInput" text="0" restrict="0-9" width="100" styleName="TextInputStyle" 
							 keyDown="keyDownHanlder(event)"/>
			</s:HGroup>
			<s:HGroup height="100%">
				<mx:Label text="Rate :" styleName="FormlabelStyle"/>
				<s:TextInput id="returnRateTxtInput" restrict="[0-9]." text="0.00" width="160" styleName="TextInputStyle"
							 keyDown="keyDownHandler(event)"/>
			</s:HGroup>
		</s:HGroup>
		
		<mx:HRule width="100%"/>
		<s:VGroup width="100%" enabled="{showReturnBill}">
			
			<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="right">
				<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="left">
					<s:HGroup width="30%">
						<s:VGroup height="100%" horizontalAlign="right">
							<mx:Label text="Total Pics : " styleName="FormlabelStyle"/>
						</s:VGroup>
						<s:VGroup height="100%">
							<mx:Text id="totalQuantityTxt" styleName="TextStyle" text="0" />
						</s:VGroup>
					</s:HGroup>
					<s:HGroup width="30%">
						<s:VGroup height="100%" horizontalAlign="right">
							<mx:Label text="Return Pics : " styleName="FormlabelStyle"/>
						</s:VGroup>
						<s:VGroup height="100%">
							<mx:Text id="returnTotalQuantityTxt" styleName="TextStyle" text="{showTotalReturn}" />
						</s:VGroup>
					</s:HGroup>
					<s:HGroup width="30%">
						<s:VGroup height="100%" horizontalAlign="right">
							<mx:Label text="Return Amount: " styleName="FormlabelStyle"/>
						</s:VGroup>
						<s:VGroup height="100%">
							<mx:Text id="returnAmountTxt" styleName="TextStyle" text="0" />
						</s:VGroup>
					</s:HGroup>
				</s:HGroup>
				<s:Button id="returnBill" label="Return Bill" width="120" height="30" styleName="DefaultGoldButton" useHandCursor="true" buttonMode="true" 
						  click="returnBill_buttonClickHandler()"/>
				<s:Button id="cancelBill" label="Reset" width="120" height="30" styleName="DefaultButton" useHandCursor="true" buttonMode="true" 
						  click="remove()"/>
			</s:HGroup>
			<mx:HRule width="100%"/>
			<s:HGroup width="100%" height="100%" paddingLeft="10" verticalAlign="middle">
				<s:HGroup width="30%">
					<s:VGroup height="100%" horizontalAlign="right">
						<mx:Label text="Bill No :" styleName="FormlabelStyle"/>
					</s:VGroup>
					<s:VGroup height="100%" horizontalAlign="left">
						<mx:Text id="billNoTxt" styleName="TextStyle" text="0" />
					</s:VGroup>
				</s:HGroup>
				
				<s:HGroup width="30%">
					<s:VGroup height="100%" horizontalAlign="right">
						<mx:Label text="Date :" styleName="FormlabelStyle"/>
					</s:VGroup>
					<s:VGroup height="100%">
						<mx:Text id="dateTxt" styleName="TextStyle" text="0"/>
					</s:VGroup>
				</s:HGroup>
				
				<s:HGroup width="30%">
					<s:VGroup height="100%" horizontalAlign="right">
						<mx:Label text="Bill Type :" styleName="FormlabelStyle"/>
					</s:VGroup>
					<s:VGroup height="100%">
						<mx:Text id="billType" styleName="TextStyle" text="0"/>
					</s:VGroup>
				</s:HGroup>
				
				<s:HGroup width="30%">
					<s:VGroup height="100%" horizontalAlign="right">
						<mx:Label text="Status :" styleName="FormlabelStyle"/>
					</s:VGroup>
					<s:VGroup height="100%">
						<mx:Text id="status" styleName="TextStyle" text="0"/>
					</s:VGroup>
				</s:HGroup>
				<!--<s:HGroup width="30%">
					<s:VGroup height="100%" horizontalAlign="right">
						<mx:Label text="Total Pics : " styleName="FormlabelStyle"/>
					</s:VGroup>
					<s:VGroup height="100%">
						<mx:Text id="totalQuantityTxt" styleName="TextStyle" text="0" />
					</s:VGroup>
				</s:HGroup>-->
			</s:HGroup>
		</s:VGroup>
		
		<s:HGroup width="100%" height="100%" enabled="{showReturnBill}">
			<mx:DataGrid id="returnGrid" width="100%" height="100%" horizontalScrollPolicy="off" focusEnabled="false" styleName="CustomDataGrid" verticalScrollPolicy="auto">
				<mx:columns>
					<!--<mx:DataGridColumn dataField="sno" headerText="S.NO" minWidth="50" width="50" headerStyleName="dataGridHeaderStyle" textAlign="center"/>-->
					
					<mx:DataGridColumn dataField="itemCode" headerText="Item Code" minWidth="130" headerStyleName="dataGridHeaderStyle" textAlign="center"/>
					
					<mx:DataGridColumn dataField="category" headerText="Category" minWidth="150" headerStyleName="dataGridHeaderStyle"/>
					
					<mx:DataGridColumn dataField="itemName" headerText="Item Name" minWidth="250" headerStyleName="dataGridHeaderStyle"/>
					
					<mx:DataGridColumn dataField="soldPrice" headerText="Rate" minWidth="100" textAlign="right" headerStyleName="dataGridHeaderStyle"
									   labelFunction="{FormatUtil.myLabelFunction}"/>
					
					<mx:DataGridColumn dataField="quantity" headerText="Pics" minWidth="100" textAlign="center" headerStyleName="dataGridHeaderStyle"/>
					
					<mx:DataGridColumn dataField="totalAmount" headerText="Total Amount" minWidth="140" textAlign="right" headerStyleName="dataGridHeaderStyle"
									   labelFunction="{FormatUtil.myLabelFunction}"/>
					
					<mx:DataGridColumn dataField="status" headerText="Status" minWidth="100" textAlign="center" headerStyleName="dataGridHeaderStyle"/>
					
					<mx:DataGridColumn dataField="returnType" headerText="Type" minWidth="100" textAlign="center" headerStyleName="dataGridHeaderStyle"/>
					
					<mx:DataGridColumn editable="false" minWidth="30" width="35">
						<mx:itemRenderer>
							<fx:Component>
								<mx:HBox width="100%" height="15" horizontalAlign="center" verticalAlign="middle">
									<fx:Script>
										<![CDATA[
											import com.arun.billingsystem.common.Constant;
										]]>
									</fx:Script>
									<mx:Button icon="@Embed(source='/images/return.png')" useHandCursor="true" buttonMode="true" 
											   click="outerDocument.returnBilling_buttonClickHandler();" visible="{data.status != Constant.BILL_STATUS_RETURN}"
											   toolTip="Return" width="15" height="15"/>
								</mx:HBox>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</mx:columns>
			</mx:DataGrid>
		</s:HGroup>
		<mx:HRule width="100%" />
		<s:HGroup width="100%" horizontalAlign="left" paddingTop="5" paddingBottom="5">
			<s:HGroup width="100%">
				<s:VGroup height="100%" horizontalAlign="right">
					<mx:Label text="Sub Total : " styleName="FormlabelStyle"/>
				</s:VGroup>
				<s:VGroup height="100%">
					<s:TextInput id="subTotalTxtInput" text="0.00" restrict="[0-9]." enabled="false" styleName="TextInputStyle"/>
				</s:VGroup>
			</s:HGroup>
			
			<s:HGroup width="100%">
				<s:VGroup height="100%" horizontalAlign="right">
					<mx:Label text="Discount : " styleName="FormlabelStyle"/>
				</s:VGroup>
				<s:VGroup height="100%">
					<s:TextInput id="discountTxtInput" text="0" restrict="[0-9]" styleName="TextInputStyle" editable="false"/>
				</s:VGroup>
			</s:HGroup>
			
			<s:HGroup width="100%">
				<s:VGroup height="100%" horizontalAlign="right">
					<mx:Label text="Grand Total : " styleName="FormlabelStyle"/>
				</s:VGroup>
				<s:VGroup height="100%">
					<s:TextInput id="grandTotalTxtInput" text="0.00" restrict="[0-9]." styleName="TextInputStyle" editable="false"/>
				</s:VGroup>
			</s:HGroup>
		</s:HGroup>
		<mx:HRule width="100%" />
		<s:HGroup width="100%" height="20%" enabled="{showReturnBill}" verticalAlign="middle">
			<s:HGroup width="50%">
				<s:VGroup height="100%" horizontalAlign="right">
					<mx:Label text="Return Sub Total : " styleName="FormlabelStyle"/>
					<mx:Label text="Return Discount : " styleName="FormlabelStyle"/>
					<mx:Label text="Return Grand Total : " styleName="FormlabelStyle"/>
				</s:VGroup>
				<s:VGroup>
					<s:TextInput id="returnSubTotalTxtInput" tabIndex="6" text="0.00" restrict="[0-9]." enabled="false" styleName="TextInputStyle"/>
					<s:TextInput id="returnDiscountTxtInput" tabIndex="7" text="0" restrict="[0-9]" styleName="TextInputStyle" 
								 keyUp="discountTxtInput_keyUpHandler()" focusOut="discountTxtInput_keyUpHandler()"/>
					<s:TextInput id="returnGrandTotalTxtInput" tabIndex="8" text="0.00" restrict="[0-9]." styleName="TextInputStyle" editable="false"/>
				</s:VGroup>
			</s:HGroup>
			
			<s:HGroup width="50%" horizontalAlign="right" paddingTop="5" paddingBottom="5">
				<mx:Text id="grandTotalTxt" width="100%" styleName="GrandTotalStyle" text="{FormatUtil.numberFormat(0.00)}"/>
			</s:HGroup>
		</s:HGroup>
	</s:VGroup>
</s:TitleWindow>